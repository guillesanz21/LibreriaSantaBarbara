{
  "openapi": "3.0.0",
  "paths": {
    "/api/books/import/all": {
      "post": {
        "operationId": "ImportExportBooksController_importBooks",
        "summary": "Import all books from a file.",
        "description": "Import all books from a file, deleting all the previous books in the database",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "csv",
                "tsv",
                "json",
                "xml"
              ],
              "type": "string"
            }
          },
          {
            "name": "keywords-to-topics",
            "required": false,
            "in": "query",
            "description": "If true, topics will be created from keywords (Uniliber doesn't export topics). DEAFULT: false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "clean-description",
            "required": false,
            "in": "query",
            "description": "If true, the description will be cleaned from &lt;p&gt; and &lt;/p&gt; tags. DEAFULT: false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Books imported",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Books not imported"
          }
        },
        "tags": [
          "Import/Export"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/export": {
      "post": {
        "operationId": "ImportExportBooksController_exportBooks",
        "summary": "Export all books to a file.",
        "description": "Export all books to a file, in the specefied format and file extension.",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "csv",
                "tsv",
                "json",
                "xml"
              ],
              "type": "string"
            }
          },
          {
            "name": "file-extension",
            "required": true,
            "in": "query",
            "description": "File extension of the exported file",
            "schema": {
              "enum": [
                "txt",
                "csv",
                "tsv",
                "json"
              ],
              "type": "string"
            }
          },
          {
            "name": "file-name",
            "required": true,
            "in": "query",
            "description": "Name of the exported file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Books exported"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Books not imported"
          }
        },
        "tags": [
          "Import/Export"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/import/conflicts": {
      "post": {
        "operationId": "ImportExportBooksController_importBooksWithConflicts",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Import/Export"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/public/new-ref": {
      "get": {
        "operationId": "BooksPublicController_getNewRef",
        "summary": "Get a new reference.",
        "description": "Get a new reference (the last one + 1).",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new reference has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Public"
        ]
      }
    },
    "/api/books/public/count": {
      "get": {
        "operationId": "BooksPublicController_count",
        "summary": "Count books",
        "description": "[Store] Count books from the store",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The books have been successfully counted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Public"
        ]
      }
    },
    "/api/books/public": {
      "get": {
        "operationId": "BooksPublicController_findMany",
        "summary": "Get all books",
        "description": "Get all books from the store",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "keywords",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "topics",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "language",
            "required": false,
            "in": "query",
            "description": "ISO 639-1 code",
            "schema": {}
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                1,
                2,
                3
              ],
              "type": "number"
            }
          },
          {
            "name": "max-pages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "min-pages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max-price",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "min-price",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "collection",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publication_place",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "publisher",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ISBN",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The books have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Book"
                              },
                              {
                                "properties": {
                                  "languages": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Language"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "keywords": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Keyword"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "topics": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Topic"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "images": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Image"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "location": {
                                    "$ref": "#/components/schemas/Location"
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "status": {
                                    "$ref": "#/components/schemas/Status"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Public"
        ]
      }
    },
    "/api/books/public/{ref}": {
      "get": {
        "operationId": "BooksPublicController_findOne",
        "summary": "Get a book",
        "description": "Get a book from the store by its ID",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The book has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Public"
        ]
      }
    },
    "/api/books/admin": {
      "post": {
        "operationId": "BooksAdminController_create",
        "summary": "Create a book",
        "description": "[Admin] Add a book to the store",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The book has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/admin/{ref}": {
      "patch": {
        "operationId": "BooksAdminController_updateOne",
        "summary": "Update a book",
        "description": "[Admin] Update a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The book has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been updated."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BooksAdminController_deleteOne",
        "summary": "Delete a book",
        "description": "[Admin] (SOFT) Delete a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been deleted."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/admin/{ref}/hard": {
      "delete": {
        "operationId": "BooksAdminController_hardDeleteOne",
        "summary": "Hard delete a book",
        "description": "[Admin] (HARD) Delete a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been deleted."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/admin/{ref}/restore": {
      "patch": {
        "operationId": "BooksAdminController_restoreOne",
        "summary": "Restore a book",
        "description": "[Admin] Restore a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully restored.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been restored."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/admin/{ref}/sell": {
      "patch": {
        "operationId": "BooksAdminController_sellOne",
        "summary": "Sell a book",
        "description": "[Admin] Sell a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully sold.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been sold."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/admin/{ref}/add-stock": {
      "patch": {
        "operationId": "BooksAdminController_addStockOne",
        "summary": "Add stock to a book",
        "description": "[Admin] Add stock to a book from the store by its reference",
        "parameters": [
          {
            "name": "store_id",
            "required": false,
            "in": "query",
            "description": "ID of the store. Default 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stock",
            "required": false,
            "in": "query",
            "description": "Stock to add",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The stock has been successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The stock has not been added."
          }
        },
        "tags": [
          "Books/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books": {
      "post": {
        "operationId": "BooksController_create",
        "summary": "Create a book",
        "description": "[Store] Add a book to the store",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBookDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The book has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "BooksController_findMany",
        "summary": "Get all books",
        "description": "[Store] Get all books from the store",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "keywords",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "topics",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {}
            }
          },
          {
            "name": "language",
            "required": false,
            "in": "query",
            "description": "ISO 639-1 code",
            "schema": {}
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                1,
                2,
                3
              ],
              "type": "number"
            }
          },
          {
            "name": "max-pages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "min-pages",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "max-price",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "min-price",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "collection",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "publication_place",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "publisher",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ISBN",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The books have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Book"
                              },
                              {
                                "properties": {
                                  "languages": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Language"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "keywords": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Keyword"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "topics": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Topic"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "images": {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/Image"
                                    }
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "location": {
                                    "$ref": "#/components/schemas/Location"
                                  }
                                }
                              },
                              {
                                "properties": {
                                  "status": {
                                    "$ref": "#/components/schemas/Status"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/new-ref": {
      "get": {
        "operationId": "BooksController_getNewRef",
        "summary": "Get a new reference.",
        "description": "[Store] Get a new reference (the last one + 1).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The new reference has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/count": {
      "get": {
        "operationId": "BooksController_count",
        "summary": "Count books",
        "description": "[Store] Count books from the store",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The books have been successfully counted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/{ref}": {
      "get": {
        "operationId": "BooksController_findOne",
        "summary": "Get a book",
        "description": "[Store] Get a book from the store by its ID",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The book has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "BooksController_updateOne",
        "summary": "Update a book",
        "description": "[Store] Update a book from the store by its reference",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The book has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been updated."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BooksController_deleteOne",
        "summary": "Delete a book",
        "description": "[Store] (SOFT) Delete a book from the store by its reference",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been deleted."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/{ref}/restore": {
      "patch": {
        "operationId": "BooksController_restoreOne",
        "summary": "Restore a book",
        "description": "[Store] Restore a book from the store by its reference",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully restored.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been restored."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/{ref}/sell": {
      "patch": {
        "operationId": "BooksController_sellOne",
        "summary": "Sell a book",
        "description": "[Store] Sell a book from the store by its reference",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The book has been successfully sold.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The book has not been sold."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/{ref}/add-stock": {
      "patch": {
        "operationId": "BooksController_addStockOne",
        "summary": "Add stock to a book",
        "description": "[Store] Add stock to a book from the store by its reference",
        "parameters": [
          {
            "name": "ref",
            "required": true,
            "in": "path",
            "description": "Book reference",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "stock",
            "required": false,
            "in": "query",
            "description": "Stock to add",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The stock has been successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Book"
                    },
                    {
                      "properties": {
                        "languages": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Keyword"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "topics": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Topic"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "images": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Image"
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "location": {
                          "$ref": "#/components/schemas/Location"
                        }
                      }
                    },
                    {
                      "properties": {
                        "status": {
                          "$ref": "#/components/schemas/Status"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "The stock has not been added."
          }
        },
        "tags": [
          "Books"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/languages/static": {
      "get": {
        "operationId": "LanguagesController_getAllStatic",
        "summary": "Get all the static languages",
        "description": "Get all the static languages (all the world languages).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All the languages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ES": {
                        "type": "string",
                        "example": "spanish"
                      },
                      "EN": {
                        "type": "string",
                        "example": "english"
                      },
                      "CA": {
                        "type": "string",
                        "example": "catalan"
                      },
                      "GL": {
                        "type": "string",
                        "example": "galician"
                      },
                      "EU": {
                        "type": "string",
                        "example": "basque"
                      },
                      "FR": {
                        "type": "string",
                        "example": "french"
                      },
                      "DE": {
                        "type": "string",
                        "example": "german"
                      },
                      "IT": {
                        "type": "string",
                        "example": "italian"
                      },
                      "PT": {
                        "type": "string",
                        "example": "portuguese"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Languages"
        ]
      }
    },
    "/api/books/languages/static/top": {
      "get": {
        "operationId": "LanguagesController_getMostUsedStatic",
        "summary": "Get the main static languages",
        "description": "Get the main static languages.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The main languages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ES": {
                        "type": "string",
                        "example": "spanish"
                      },
                      "EN": {
                        "type": "string",
                        "example": "english"
                      },
                      "CA": {
                        "type": "string",
                        "example": "catalan"
                      },
                      "GL": {
                        "type": "string",
                        "example": "galician"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Languages"
        ]
      }
    },
    "/api/books/languages/static/{alpha2}": {
      "get": {
        "operationId": "LanguagesController_getOneStatic",
        "summary": "Get a language by its alpha2 code",
        "description": "Get a language by its alpha2 code.",
        "parameters": [
          {
            "name": "alpha2",
            "required": true,
            "in": "path",
            "example": "ES",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The language.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ES": {
                      "type": "string",
                      "example": "spanish"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Languages"
        ]
      }
    },
    "/api/books/languages/{id}": {
      "get": {
        "operationId": "LanguagesController_findOne",
        "summary": "Get a language by id",
        "description": "Get a language by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The language.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          }
        },
        "tags": [
          "Books/Languages"
        ]
      },
      "delete": {
        "operationId": "LanguagesController_delete",
        "summary": "Delete a language by id",
        "description": "Delete a language by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The language has been deleted."
          }
        },
        "tags": [
          "Books/Languages"
        ]
      }
    },
    "/api/books/topics": {
      "get": {
        "operationId": "TopicsController_findAll",
        "summary": "Get all the topics",
        "description": "Get all the topics.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The topics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Topics"
        ]
      },
      "post": {
        "operationId": "TopicsController_create",
        "summary": "Create a topic",
        "description": "[Admin, Store] Create a topic.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The topic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (store or admin)."
          }
        },
        "tags": [
          "Books/Topics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/topics/{id}": {
      "get": {
        "operationId": "TopicsController_findOne",
        "summary": "Get a topic by id",
        "description": "Get a topic by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The topic.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          }
        },
        "tags": [
          "Books/Topics"
        ]
      },
      "patch": {
        "operationId": "TopicsController_update",
        "summary": "Update a topic",
        "description": "[Admin, Store] Update a topic.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTopicDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The topic has been updated."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (store or admin)."
          }
        },
        "tags": [
          "Books/Topics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "TopicsController_delete",
        "summary": "Delete a topic",
        "description": "[Admin, Store] Delete a topic.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The topic has been deleted."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Books/Topics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/topics/{id}/books": {
      "get": {
        "operationId": "TopicsController_findBooksByTopic",
        "summary": "Get all the books of one topic",
        "description": "Get all the books of one topic.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The books.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Topics"
        ]
      }
    },
    "/api/books/locations": {
      "post": {
        "operationId": "LocationsController_create",
        "summary": "Create a location",
        "description": "[Admin, Store] Create a location associated to the store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Locations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "LocationsController_findMany",
        "summary": "Get all the locations",
        "description": "[Admin, Store] Get all the locations associated to the store.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The locations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Locations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/locations/{id}": {
      "get": {
        "operationId": "LocationsController_findOne",
        "summary": "Get a location by id",
        "description": "[Admin, Store] Get a location by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The location.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          }
        },
        "tags": [
          "Books/Locations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "LocationsController_update",
        "summary": "Update a location",
        "description": "[Admin, Store] Update a location associated to the store.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The location has been updated."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "Location not updated."
          }
        },
        "tags": [
          "Books/Locations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "LocationsController_delete",
        "summary": "Delete a location",
        "description": "[Admin, Store] (Hard) Delete a location associated to the store.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The location has been (hard) deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "Location not deleted."
          }
        },
        "tags": [
          "Books/Locations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/stores": {
      "post": {
        "operationId": "StoresController_create",
        "summary": "Create a new store",
        "description": "[Admin] Create a new store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStoreDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Store"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "StoresController_findMany",
        "summary": "Get all the stores by filtering them",
        "description": "[Admin] Get all the filtered stores.",
        "parameters": [
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "approved",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "$ref": "#/components/schemas/Store"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/stores/pagination": {
      "get": {
        "operationId": "StoresController_findManyWithPagination",
        "summary": "Get all the stores by filtering them (with pagination)",
        "description": "[Admin] Get all the filtered stores (with pagination).",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Results/page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "approved",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/User"
                              },
                              {
                                "$ref": "#/components/schemas/Store"
                              }
                            ]
                          }
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/stores/{id}": {
      "get": {
        "operationId": "StoresController_findOne",
        "summary": "Get a store by ID",
        "description": "[Admin] Get the specified store by its ID (store_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Store"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "StoresController_update",
        "summary": "Update a store.",
        "description": "[Admin] Update the specified store by its ID (store_id) with the specified data.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The record has been successfully updated."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "StoresController_remove",
        "summary": "Delete a store",
        "description": "[Admin] Delete the specified store by its ID (store_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mode",
            "required": false,
            "in": "query",
            "description": "Delete mode (soft or hard). Default: soft",
            "schema": {
              "enum": [
                "soft",
                "hard"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully deleted."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/stores/{id}/restore": {
      "patch": {
        "operationId": "StoresController_restore",
        "summary": "Restore a store",
        "description": "[Admin] Restore a soft deleted store specified  by its ID (store_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully restored."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Stores"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/books/status": {
      "post": {
        "operationId": "StatusController_create",
        "summary": "Create a status",
        "description": "[Admin] Create a status associated to the store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "tags": [
          "Books/Status"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "StatusController_findMany",
        "summary": "Get all the status",
        "description": "Get all the status available.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Status"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Books/Status"
        ]
      }
    },
    "/api/books/status/{id}": {
      "get": {
        "operationId": "StatusController_findOne",
        "summary": "Get a status by id",
        "description": "Get a status by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        },
        "tags": [
          "Books/Status"
        ]
      },
      "patch": {
        "operationId": "StatusController_delete",
        "summary": "Delete a status by id",
        "description": "[Admin] Delete a status by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The status has been successfully deleted."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "500": {
            "description": "The status could not be deleted."
          }
        },
        "tags": [
          "Books/Status"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin/stores/approve": {
      "post": {
        "operationId": "AdminController_aproveStore",
        "summary": "Approve a store",
        "description": "[Admin] Approve a store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AproveRejectStroreDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The store has been successfully approved."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "404": {
            "description": "The user is not found."
          },
          "422": {
            "description": "The store is already approved."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin/stores/reject": {
      "post": {
        "operationId": "AdminController_rejectStore",
        "summary": "Reject a store",
        "description": "[Admin] Reject a store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AproveRejectStroreDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The store has been successfully rejected."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "404": {
            "description": "The user is not found."
          },
          "422": {
            "description": "The store is already rejected."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin": {
      "post": {
        "operationId": "AdminController_create",
        "summary": "Create a new user",
        "description": "[Admin] Create a new user (default: admin).",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdminDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "AdminController_findMany",
        "summary": "Get all the users by filtering them",
        "description": "[Admin] Get all the filtered users (doesn't return user type specific fields).",
        "parameters": [
          {
            "name": "user-type",
            "required": false,
            "in": "query",
            "description": "User Type (1: Admin, 2: Store, 3: Customer)",
            "schema": {
              "enum": [
                1,
                2,
                3
              ],
              "type": "number"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin/pagination": {
      "get": {
        "operationId": "AdminController_findManyWithPagination",
        "summary": "Get all the users by filtering them (with pagination)",
        "description": "[Admin] Get all the filtered users (with pagination) (doesn't return user type specific fields).",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Results/page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "user-type",
            "required": false,
            "in": "query",
            "description": "User Type (1: Admin, 2: Store, 3: Customer)",
            "schema": {
              "enum": [
                1,
                2,
                3
              ],
              "type": "number"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin/{id}": {
      "get": {
        "operationId": "AdminController_findOne",
        "summary": "Get a user by ID",
        "description": "[Admin] Get the specified user by its ID (user_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "AdminController_update",
        "summary": "Update a user.",
        "description": "[Admin] Update the specified user by its ID (user_id) with the specified data.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAdminDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The record has been successfully updated."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminController_remove",
        "summary": "Delete a user",
        "description": "[Admin] Delete the specified user by its ID (user_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mode",
            "required": false,
            "in": "query",
            "description": "Delete mode (soft or hard). Default: soft",
            "schema": {
              "enum": [
                "soft",
                "hard"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully deleted."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/admin/{id}/restore": {
      "patch": {
        "operationId": "AdminController_restore",
        "summary": "Restore a user",
        "description": "[Admin] Restore a soft deleted user specified  by its ID (user_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully restored."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Admin"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/customers": {
      "post": {
        "operationId": "CustomersController_create",
        "summary": "Create a new customer",
        "description": "[Admin] Create a new customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The record has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Customer"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CustomersController_findMany",
        "summary": "Get all the customers by filtering them",
        "description": "[Admin] Get all the filtered customers",
        "parameters": [
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first-name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last-name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "$ref": "#/components/schemas/Customer"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/customers/pagination": {
      "get": {
        "operationId": "CustomersController_findManyWithPagination",
        "summary": "Get all the customers by filtering them (with pagination)",
        "description": "[Admin] Get all the filtered customers (with pagination).",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "description": "Results/page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "NIF",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first-name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "last-name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Role (1: Admin, 2: Store, 3: Customer, 4: Unapproved Store, 5: Unconfirmed, 6: Guest)",
            "schema": {
              "enum": [
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "type": "number"
            }
          },
          {
            "name": "email-confirmed",
            "required": false,
            "in": "query",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "The records have been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/User"
                              },
                              {
                                "$ref": "#/components/schemas/Customer"
                              }
                            ]
                          }
                        },
                        "hasNextPage": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/customers/{id}": {
      "get": {
        "operationId": "CustomersController_findOne",
        "summary": "Get a customer by ID",
        "description": "[Admin] Get the specified customer by its ID (customer_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The record has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Customer"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CustomersController_update",
        "summary": "Update a customer.",
        "description": "[Admin] Update the specified customer by its ID (customer_id) with the specified data.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The record has been successfully updated."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CustomersController_remove",
        "summary": "Delete a customer",
        "description": "[Admin] Delete the specified customer by its ID (customer_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "mode",
            "required": false,
            "in": "query",
            "description": "Delete mode (soft or hard). Default: soft",
            "schema": {
              "enum": [
                "soft",
                "hard"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully deleted."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/users/customers/{id}/restore": {
      "patch": {
        "operationId": "CustomersController_restore",
        "summary": "Restore a customer",
        "description": "[Admin] Restore a soft deleted customer specified  by its ID (customer_id).",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The record has been successfully restored."
          },
          "401": {
            "description": "The admin is not logged in."
          },
          "403": {
            "description": "The user hasn't the right role (admin)."
          }
        },
        "tags": [
          "Users/Customers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/email/stores/login": {
      "post": {
        "operationId": "JwtController_loginStore",
        "summary": "Store login",
        "description": "Login a store with email and password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLoginEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The store has been successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The store was not found."
          },
          "422": {
            "description": "Incorrect password."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/customers/login": {
      "post": {
        "operationId": "JwtController_loginCustomer",
        "summary": "Customer login",
        "description": "Login a customer with email and password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLoginEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The customer has been successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The customer was not found."
          },
          "422": {
            "description": "Incorrect password."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/admin/login": {
      "post": {
        "operationId": "JwtController_adminLogin",
        "summary": "Admin login",
        "description": "Login an admin with email and password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthLoginEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The admin has been successfully logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The user was not found."
          },
          "422": {
            "description": "Incorrect password."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/stores/register": {
      "post": {
        "operationId": "JwtController_registerStore",
        "summary": "Store registration",
        "description": "Register a store with email and password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRegisterStoreDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The store has been successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "The password must be at least 8 characters long."
          },
          "500": {
            "description": "Error creating user."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/customers/register": {
      "post": {
        "operationId": "JwtController_registerCustomer",
        "summary": "Customer registration",
        "description": "Register a customer with email and password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRegisterCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The customer has been successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "422": {
            "description": "The password must be at least 8 characters long."
          },
          "500": {
            "description": "Error creating user."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/stores/register/confirm": {
      "post": {
        "operationId": "JwtController_confirmStoreEmail",
        "summary": "Email confirmation",
        "description": "Confirm the email of a store to complete the registration process.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthConfirmEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email has been successfully confirmed."
          },
          "404": {
            "description": "The store was not found."
          },
          "422": {
            "description": "The hash is empty."
          },
          "500": {
            "description": "Error confirming email."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/customers/register/confirm": {
      "post": {
        "operationId": "JwtController_confirmCustomerEmail",
        "summary": "Email confirmation",
        "description": "Confirm the email of a customer to complete the registration process.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthConfirmEmailDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email has been successfully confirmed."
          },
          "404": {
            "description": "The customer was not found."
          },
          "422": {
            "description": "The hash is empty."
          },
          "500": {
            "description": "Error confirming email."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/stores/password/forgot": {
      "post": {
        "operationId": "JwtController_forgotStorePassword",
        "summary": "Store forgot password",
        "description": "Send an email to the store with a link to reset the password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email has been successfully sent."
          },
          "404": {
            "description": "The store was not found."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/customers/password/forgot": {
      "post": {
        "operationId": "JwtController_forgotCustomerPassword",
        "summary": "Customer forgot password",
        "description": "Send an email to the customer with a link to reset the password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The email has been successfully sent."
          },
          "404": {
            "description": "The customer was not found."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/stores/password/reset": {
      "post": {
        "operationId": "JwtController_resetStorePassword",
        "summary": "Store reset password",
        "description": "Reset the password of a store with the hash sent by email.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The password has been successfully reset."
          },
          "404": {
            "description": "The store was not found."
          },
          "422": {
            "description": "The password must be at least 8 characters long."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/customers/password/reset": {
      "post": {
        "operationId": "JwtController_resetCustomerPassword",
        "summary": "Customer reset password",
        "description": "Reset the password of a customer with the hash sent by email.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The password has been successfully reset."
          },
          "404": {
            "description": "The customer was not found."
          },
          "422": {
            "description": "The password must be at least 8 characters long."
          }
        },
        "tags": [
          "Authentication/Email"
        ]
      }
    },
    "/api/auth/email/me/logout": {
      "post": {
        "operationId": "JwtController_logoutStore",
        "summary": "Logout",
        "description": "[*] Logout the user by removing the token from the request object.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The user has been successfully logged out."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "500": {
            "description": "Error logging out."
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/email/me": {
      "get": {
        "operationId": "JwtController_me",
        "summary": "Me",
        "description": "[*] Get the user data of the user in the request object.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The user data has been successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "$ref": "#/components/schemas/Store"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The user is not logged in."
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "JwtController_delete",
        "summary": "Delete",
        "description": "[*] Soft-delete the user in the request object.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "The user has been successfully deleted."
          },
          "401": {
            "description": "The user is not logged in."
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/email/me/stores": {
      "patch": {
        "operationId": "JwtController_updateStore",
        "summary": "Update store",
        "description": "[*] Update the store data of the user in the request object.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpdateStoreDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The store data has been successfully updated."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "422": {
            "description": "Invalid data"
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/email/me/customers": {
      "patch": {
        "operationId": "JwtController_updateCustomer",
        "summary": "Update customer",
        "description": "[*] Update the customer data of the user in the request object.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpdateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The customer data has been successfully updated."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "422": {
            "description": "The email is not valid."
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/auth/email/me/password": {
      "patch": {
        "operationId": "JwtController_updatePassword",
        "summary": "Update password",
        "description": "[*] Update the password of the user in the request object.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthUpdatePasswordDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The password has been successfully updated."
          },
          "401": {
            "description": "The user is not logged in."
          },
          "404": {
            "description": "The user was not found."
          },
          "422": {
            "description": "Incorret password"
          }
        },
        "tags": [
          "Authentication/Email"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Librería Santa Bárbara API",
    "description": "API documentation for Librería Santa Bárbara",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateBookDto": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the location where book is stored"
          },
          "status_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the status of the book"
          },
          "ref": {
            "type": "number",
            "example": 1,
            "description": "The external id/reference of the book. Should be unique."
          },
          "ISBN": {
            "type": "string",
            "example": "978-1250788450",
            "description": "The ISBN (13/10) of the book"
          },
          "title": {
            "type": "string",
            "example": "The Lord of the Rings",
            "description": "The title of the book"
          },
          "author": {
            "type": "string",
            "example": "J. R. R. Tolkien",
            "description": "The author of the book"
          },
          "publication_place": {
            "type": "string",
            "example": "Portugal",
            "description": "The publication place (country, region, etc.) of the book"
          },
          "publisher": {
            "type": "string",
            "example": "Círculo de Leitores",
            "description": "The publisher of the book"
          },
          "collection": {
            "type": "string",
            "example": "Colecção: Obras de J. R. R. Tolkien",
            "description": "The collection of the book"
          },
          "year": {
            "type": "number",
            "example": 2012,
            "description": "The publication year of the book"
          },
          "size": {
            "type": "string",
            "example": "20x13",
            "description": "The size of the book (height x width)"
          },
          "weight": {
            "type": "number",
            "example": 500,
            "description": "The weight of the book (in grams)"
          },
          "pages": {
            "type": "number",
            "example": 500,
            "description": "The number of pages of the book"
          },
          "condition": {
            "type": "string",
            "example": "With dust jacket",
            "description": "The condition of the book"
          },
          "description": {
            "type": "string",
            "example": "The Lord of the Rings is an epic high-fantasy novel",
            "description": "The description of the book"
          },
          "price": {
            "type": "number",
            "example": 30,
            "description": "The price of the book (euros)"
          },
          "stock": {
            "type": "number",
            "example": 2,
            "description": "The stock of the book",
            "default": 1
          },
          "binding": {
            "type": "string",
            "example": "Hardcover",
            "description": "The binding of the book",
            "default": null
          },
          "private_note": {
            "type": "string",
            "example": "Erase the pencil marks",
            "description": "A private note that only the store can see",
            "default": null
          },
          "sold_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the book was sold",
            "default": null
          },
          "keywords": {
            "example": [
              "used",
              "adventure",
              "epic"
            ],
            "description": "The keywords of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "example": [
              "ES",
              "EN"
            ],
            "description": "The languages of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "example": [
              "https://example.com/image1.jpg"
            ],
            "description": "The images of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "example": [
              "fantasy",
              "adventure",
              "epic"
            ],
            "description": "The topics of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ref",
          "ISBN",
          "title"
        ]
      },
      "UpdateBookDto": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the location where book is stored"
          },
          "status_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the status of the book"
          },
          "ref": {
            "type": "number",
            "example": 1,
            "description": "The external id/reference of the book. Should be unique."
          },
          "ISBN": {
            "type": "string",
            "example": "978-1250788450",
            "description": "The ISBN (13/10) of the book"
          },
          "title": {
            "type": "string",
            "example": "The Lord of the Rings",
            "description": "The title of the book"
          },
          "author": {
            "type": "string",
            "example": "J. R. R. Tolkien",
            "description": "The author of the book"
          },
          "publication_place": {
            "type": "string",
            "example": "Portugal",
            "description": "The publication place (country, region, etc.) of the book"
          },
          "publisher": {
            "type": "string",
            "example": "Círculo de Leitores",
            "description": "The publisher of the book"
          },
          "collection": {
            "type": "string",
            "example": "Colecção: Obras de J. R. R. Tolkien",
            "description": "The collection of the book"
          },
          "year": {
            "type": "number",
            "example": 2012,
            "description": "The publication year of the book"
          },
          "size": {
            "type": "string",
            "example": "20x13",
            "description": "The size of the book (height x width)"
          },
          "weight": {
            "type": "number",
            "example": 500,
            "description": "The weight of the book (in grams)"
          },
          "pages": {
            "type": "number",
            "example": 500,
            "description": "The number of pages of the book"
          },
          "condition": {
            "type": "string",
            "example": "With dust jacket",
            "description": "The condition of the book"
          },
          "description": {
            "type": "string",
            "example": "The Lord of the Rings is an epic high-fantasy novel",
            "description": "The description of the book"
          },
          "price": {
            "type": "number",
            "example": 30,
            "description": "The price of the book (euros)"
          },
          "stock": {
            "type": "number",
            "example": 2,
            "description": "The stock of the book",
            "default": 1
          },
          "binding": {
            "type": "string",
            "example": "Hardcover",
            "description": "The binding of the book",
            "default": null
          },
          "private_note": {
            "type": "string",
            "example": "Erase the pencil marks",
            "description": "A private note that only the store can see",
            "default": null
          },
          "sold_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the book was sold",
            "default": null
          },
          "keywords": {
            "example": [
              "used",
              "adventure",
              "epic"
            ],
            "description": "The keywords of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "example": [
              "ES",
              "EN"
            ],
            "description": "The languages of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "example": [
              "https://example.com/image1.jpg"
            ],
            "description": "The images of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "topics": {
            "example": [
              "fantasy",
              "adventure",
              "epic"
            ],
            "description": "The topics of the book",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The internal id of the book"
          },
          "store_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the store that have the book"
          },
          "location_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the location where book is stored"
          },
          "status_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the status of the book"
          },
          "ref": {
            "type": "number",
            "example": 1,
            "description": "The external id/reference of the book"
          },
          "ISBN": {
            "type": "string",
            "example": "9781250788450",
            "description": "The ISBN (13/10) of the book"
          },
          "title": {
            "type": "string",
            "example": "The Lord of the Rings",
            "description": "The title of the book"
          },
          "author": {
            "type": "string",
            "example": "J. R. R. Tolkien",
            "description": "The author of the book"
          },
          "publication_place": {
            "type": "string",
            "example": "Portugal",
            "description": "The publication place (country, region, etc.) of the book"
          },
          "publisher": {
            "type": "string",
            "example": "Círculo de Leitores",
            "description": "The publisher of the book"
          },
          "collection": {
            "type": "string",
            "example": "Colecção: Obras de J. R. R. Tolkien",
            "description": "The collection of the book"
          },
          "year": {
            "type": "number",
            "example": 2012,
            "description": "The publication year of the book"
          },
          "size": {
            "type": "string",
            "example": "20x13",
            "description": "The size of the book (height x width)"
          },
          "weight": {
            "type": "number",
            "example": 500,
            "description": "The weight of the book (in grams)"
          },
          "pages": {
            "type": "number",
            "example": 500,
            "description": "The number of pages of the book"
          },
          "condition": {
            "type": "string",
            "example": "With dust jacket",
            "description": "The condition of the book"
          },
          "description": {
            "type": "string",
            "example": "The Lord of the Rings is an epic high-fantasy novel",
            "description": "The description of the book"
          },
          "price": {
            "type": "number",
            "example": 30,
            "description": "The price of the book (euros)"
          },
          "stock": {
            "type": "number",
            "example": 2,
            "description": "The stock of the book"
          },
          "binding": {
            "type": "string",
            "example": "Hardcover",
            "description": "The type of binding of the book"
          },
          "private_note": {
            "type": "string",
            "example": "Erase the pencil marks",
            "description": "A private note that only the store can see"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01",
            "description": "The date when the book was created"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "Date when the book has been updated"
          },
          "sold_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the book has been sold"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the book has been (soft) deleted"
          }
        },
        "required": [
          "id",
          "store_id",
          "location_id",
          "status_id",
          "ref",
          "ISBN",
          "title",
          "author",
          "publication_place",
          "publisher",
          "collection",
          "year",
          "size",
          "weight",
          "pages",
          "condition",
          "description",
          "price",
          "stock",
          "binding",
          "private_note",
          "created_at",
          "updated_at",
          "sold_at",
          "deleted_at"
        ]
      },
      "Keyword": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the keyword"
          },
          "book_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the book that the keyword references to"
          },
          "keyword": {
            "type": "string",
            "example": "keyword",
            "description": "The keyword"
          }
        },
        "required": [
          "id",
          "book_id",
          "keyword"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the image"
          },
          "book_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the book that the image belongs to"
          },
          "url": {
            "type": "string",
            "example": "https://example.com/image.png",
            "description": "The url of the image"
          }
        },
        "required": [
          "id",
          "book_id",
          "url"
        ]
      },
      "Language": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the language"
          },
          "book_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the book that the language references to"
          },
          "language": {
            "type": "string",
            "example": "EN",
            "description": "ISO 639-1 Alpha-2 code of the language"
          }
        },
        "required": [
          "id",
          "book_id",
          "language"
        ]
      },
      "Topic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the topic"
          },
          "topic": {
            "type": "string",
            "example": "History",
            "description": "The topic"
          }
        },
        "required": [
          "id",
          "topic"
        ]
      },
      "CreateTopicDto": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "example": "Fiction",
            "description": "The topic of the book"
          }
        },
        "required": [
          "topic"
        ]
      },
      "UpdateTopicDto": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "example": "Fiction",
            "description": "The topic of the book"
          }
        }
      },
      "CreateLocationDto": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "example": "Storage 1",
            "description": "The location of the book"
          }
        },
        "required": [
          "location"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the location"
          },
          "store_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the store where the location is"
          },
          "location": {
            "type": "string",
            "example": "Storage",
            "description": "The location"
          }
        },
        "required": [
          "id",
          "store_id",
          "location"
        ]
      },
      "UpdateLocationDto": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "example": "Storage 1",
            "description": "The location of the book"
          }
        }
      },
      "Store": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the store"
          },
          "user_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the user"
          },
          "approved": {
            "type": "boolean",
            "example": false,
            "description": "Store approval store by a admin"
          },
          "name": {
            "type": "string",
            "example": "Store name",
            "description": "The name of the store"
          },
          "last_activity": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01",
            "description": "Date when the store has interactuated with the app"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "Date when the store has been updated"
          }
        },
        "required": [
          "id",
          "user_id",
          "approved",
          "name",
          "last_activity",
          "updated_at"
        ]
      },
      "CreateStoreDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 2,
            "description": "The id of the role that the user will have",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ]
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the store.",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the store. Should be unique among stores.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          },
          "name": {
            "type": "string",
            "example": "Librería San Pablo",
            "description": "The name of the store. Should be unique among stores.",
            "maxLength": 100
          },
          "approved": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the store has been approved by an admin or not."
          }
        },
        "required": [
          "role_id",
          "password",
          "email",
          "name"
        ]
      },
      "UpdateStoreDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 2,
            "description": "The id of the role that the user will have",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ]
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the store.",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the store. Should be unique among stores.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          },
          "name": {
            "type": "string",
            "example": "Librería San Pablo",
            "description": "The name of the store. Should be unique among stores.",
            "maxLength": 100
          },
          "approved": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the store has been approved by an admin or not."
          }
        }
      },
      "CreateStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Available",
            "description": "The status of the book"
          }
        },
        "required": [
          "status"
        ]
      },
      "Status": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the status"
          },
          "status": {
            "type": "string",
            "example": "Sold",
            "description": "The status"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "UpdateStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "Available",
            "description": "The status of the book"
          }
        }
      },
      "AproveRejectStroreDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "1a2b3c4d5e6f",
            "description": "The hash used to aprove or reject the store by the admin"
          }
        },
        "required": [
          "hash"
        ]
      },
      "CreateAdminDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 1,
            "description": "The role ID.",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "default": 1
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the store.",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "user_type_id": {
            "type": "number",
            "example": 1,
            "default": 1,
            "description": "The user type ID.",
            "enum": [
              1,
              2,
              3
            ]
          },
          "email": {
            "type": "string",
            "example": "admin@admin.com",
            "description": "The email of the admin. Should be unique.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          }
        },
        "required": [
          "role_id",
          "password",
          "email"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the user"
          },
          "user_type_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the user type"
          },
          "role_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the role"
          },
          "email": {
            "type": "string",
            "example": "example@example.com",
            "description": "The email of the user"
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the user"
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user"
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number"
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "description": "The email confirmation status of the user"
          },
          "hash": {
            "type": "string",
            "example": null,
            "description": "Hash used to verify email at registration"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2021-01-01",
            "description": "The date when the user was created"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the user has been updated"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "The date when the user has been (soft) deleted"
          }
        },
        "required": [
          "id",
          "user_type_id",
          "role_id",
          "email",
          "NIF",
          "address",
          "phone_number",
          "email_confirmed",
          "hash",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "UpdateAdminDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 1,
            "description": "The role ID.",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "default": 1
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the store.",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "user_type_id": {
            "type": "number",
            "example": 1,
            "default": 1,
            "description": "The user type ID.",
            "enum": [
              1,
              2,
              3
            ]
          },
          "email": {
            "type": "string",
            "example": "admin@admin.com",
            "description": "The email of the admin. Should be unique.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the customer"
          },
          "user_id": {
            "type": "number",
            "example": 1,
            "description": "The id of the user"
          },
          "provider": {
            "type": "string",
            "example": "email",
            "description": "The login provider of the customer"
          },
          "social_id": {
            "type": "string",
            "example": null,
            "description": "The social id associated to a provider of the customer"
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the customer"
          },
          "last_name": {
            "type": "string",
            "example": "Doe Doe",
            "description": "The last(s) name of the customer"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "Date when the customer has been updated"
          }
        },
        "required": [
          "id",
          "user_id",
          "provider",
          "social_id",
          "first_name",
          "last_name",
          "updated_at"
        ]
      },
      "CreateCustomerDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 2,
            "description": "The id of the role that the user will have",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ]
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the user",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "email": {
            "type": "string",
            "example": "customer@customer.com",
            "description": "The email of the customer. Should be unique among customers.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the customer. Should be alphanumeric and unique among customers.",
            "maxLength": 15
          },
          "provider": {
            "type": "string",
            "example": "email",
            "default": "email",
            "description": "The provider of the customer.",
            "enum": [
              "email"
            ]
          },
          "social_id": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "The social id of the customer associated with the provider."
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the customer.",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "example": "Doe Doe",
            "description": "The last name(s) of the customer.",
            "maxLength": 200
          }
        },
        "required": [
          "role_id",
          "email"
        ]
      },
      "UpdateCustomerDto": {
        "type": "object",
        "properties": {
          "role_id": {
            "type": "number",
            "example": 2,
            "description": "The id of the role that the user will have",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ]
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the user",
            "minLength": 8
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the user",
            "maxLength": 300
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the user",
            "maxLength": 15
          },
          "email_confirmed": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "Whether the email of the user has been confirmed or not by the himself."
          },
          "hash": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "Hash used to verify the email of the user at registration"
          },
          "email": {
            "type": "string",
            "example": "customer@customer.com",
            "description": "The email of the customer. Should be unique among customers.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the customer. Should be alphanumeric and unique among customers.",
            "maxLength": 15
          },
          "provider": {
            "type": "string",
            "example": "email",
            "default": "email",
            "description": "The provider of the customer.",
            "enum": [
              "email"
            ]
          },
          "social_id": {
            "type": "string",
            "example": null,
            "default": null,
            "description": "The social id of the customer associated with the provider."
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the customer.",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "example": "Doe Doe",
            "description": "The last name(s) of the customer.",
            "maxLength": 200
          }
        }
      },
      "AuthLoginEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the user that forgot the password. Should exist."
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the user."
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthRegisterStoreDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the store. Should be unique among stores.",
            "maxLength": 300
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the store.",
            "minLength": 8
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the store.",
            "maxLength": 15
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          },
          "name": {
            "type": "string",
            "example": "Store Name",
            "description": "The name of the store. Should be unique among stores.",
            "maxLength": 100
          },
          "address": {
            "type": "string",
            "example": "Calle de la tienda, 123",
            "description": "The address of the store.",
            "maxLength": 300
          }
        },
        "required": [
          "email",
          "password",
          "phone_number",
          "NIF",
          "name"
        ]
      },
      "AuthRegisterCustomerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "customer@customer.com",
            "description": "The email of the customer. Should be unique among customers.",
            "maxLength": 300
          },
          "password": {
            "type": "string",
            "example": "test",
            "description": "The password of the customer.",
            "minLength": 8
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the customer. Should be alphanumeric and unique among customers.",
            "maxLength": 15
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the customer.",
            "maxLength": 15
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the customer.",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "example": "Doe Doe",
            "description": "The last name(s) of the customer.",
            "maxLength": 200
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the customer.",
            "maxLength": 300
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "AuthConfirmEmailDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "example": "1a2b3c4d5e6f",
            "description": "The hash used to verify the email of the user at registration"
          }
        },
        "required": [
          "hash"
        ]
      },
      "AuthForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the user that forgot the password. Should exist."
          }
        },
        "required": [
          "email"
        ]
      },
      "AuthResetPasswordDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "test",
            "description": "The new password of the user.",
            "minLength": 8
          },
          "hash": {
            "type": "string",
            "example": "1a2b3c4d5e6f",
            "description": "The hash used to reset the password of the user."
          }
        },
        "required": [
          "password",
          "hash"
        ]
      },
      "AuthUpdateStoreDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "store@store.com",
            "description": "The email of the store. Should be unique among stores.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the store. Should be alphanumeric and unique among stores.",
            "maxLength": 15
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the store.",
            "maxLength": 15
          },
          "name": {
            "type": "string",
            "example": "Librería San Pablo",
            "description": "The name of the store.",
            "maxLength": 100
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the store.",
            "maxLength": 300
          }
        }
      },
      "AuthUpdateCustomerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "customer@customer.com",
            "description": "The email of the customer. Should be unique among customers.",
            "maxLength": 300
          },
          "NIF": {
            "type": "string",
            "example": "12345678A",
            "description": "The NIF of the customer. Should be alphanumeric and unique among customers.",
            "maxLength": 15
          },
          "phone_number": {
            "type": "string",
            "example": "+34661122334",
            "description": "The phone number of the customer.",
            "maxLength": 15
          },
          "first_name": {
            "type": "string",
            "example": "John",
            "description": "The first name of the customer.",
            "maxLength": 100
          },
          "last_name": {
            "type": "string",
            "example": "Doe Doe",
            "description": "The last name of the customer.",
            "maxLength": 200
          },
          "address": {
            "type": "string",
            "example": "Calle Princesa 12B",
            "description": "The address of the customer.",
            "maxLength": 300
          }
        }
      },
      "AuthUpdatePasswordDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "test",
            "description": "The new password of the user.",
            "minLength": 8
          },
          "oldPassword": {
            "type": "string",
            "example": "oldPassword1234#",
            "description": "The old password of the user."
          }
        },
        "required": [
          "password",
          "oldPassword"
        ]
      }
    }
  }
}