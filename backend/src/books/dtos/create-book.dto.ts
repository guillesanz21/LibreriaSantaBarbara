import {
  IsDefined,
  IsOptional,
  IsString,
  IsNumber,
  IsDate,
  IsISBN,
  MaxLength,
  Max,
  Min,
  IsUrl,
} from 'class-validator';
import { bookConstraints as constraints } from 'src/config/constants/database.constraint_values';
import { IBook } from '../interfaces/book.interface';

export class CreateBookDto implements IBook {
  @IsDefined()
  @IsNumber()
  // CHECK: Implement @IsCompositeUnique() validator or catch error generated by the database?
  // CHECK: Implement @IsExists() validator or catch error generated by the database?
  store_id: number;

  @IsOptional()
  @IsNumber()
  // CHECK: Implement @IsExists() validator or catch error generated by the database?
  location_id: number;

  @IsDefined()
  @IsNumber()
  // CHECK: Implement @IsExists() validator or catch error generated by the database?
  status_id: number;

  @IsDefined()
  @IsNumber()
  @Min(constraints.ref.min)
  // CHECK: Implement @IsCompositeUnique() validator or catch error generated by the database?
  ref: number;

  @IsDefined()
  @IsISBN()
  ISBN: string;

  @IsDefined()
  @IsString()
  @MaxLength(constraints.title.maxLength)
  title: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.author.maxLength)
  author: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.publication_place.maxLength)
  publication_place: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.publisher.maxLength)
  publisher: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.collection.maxLength)
  collection: string;

  @IsOptional()
  @IsNumber()
  @Max(2055)
  year: number;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.size.maxLength)
  size: string;

  @IsOptional()
  @IsNumber()
  @Min(constraints.weight.min)
  weight: number;

  @IsOptional()
  @IsNumber()
  @Min(constraints.pages.min)
  pages: number;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.condition.maxLength)
  condition: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.description.maxLength)
  description: string;

  @IsDefined()
  @IsString()
  @Min(constraints.price.min)
  price: number;

  @IsOptional()
  @IsNumber()
  @Min(constraints.stock.min)
  stock: number;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.binding.maxLength)
  binding: string;

  @IsOptional()
  @IsString()
  @MaxLength(constraints.private_note.maxLength)
  private_note: string;

  @IsDefined()
  @IsDate()
  created_at: Date;

  @IsOptional()
  @IsDate()
  sold_at: Date;

  @IsOptional()
  @MaxLength(constraints.keyword.maxLength, {
    each: true,
  })
  keywords: string[];

  @IsOptional()
  @IsUrl({}, { each: true })
  images: string[];

  @IsOptional()
  @MaxLength(constraints.topic.maxLength, { each: true })
  topics: string[];
}
